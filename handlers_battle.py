# handlers_battle.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
import random, asyncio, time, json
from utils import load_users, save_users


waiting_player = None
waiting_context = None
active_battles = {}
user_states = {}

with open("questions.json", "r", encoding="utf-8") as f:
    all_questions = json.load(f)

async def battle_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = (
        "‚öîÔ∏è <b>1x1 –ë–∞—Ç—Ç–ª —Ä–µ–∂–∏–º—ñ / –†–µ–∂–∏–º 1x1 –ë–∞—Ç—Ç–ª</b>\n\n"
        "üá∞üáø –ï–∫—ñ –æ–π—ã–Ω—à—ã –±—ñ—Ä-–±—ñ—Ä—ñ–Ω–µ “õ–∞—Ä—Å—ã –∂–∞—Ä—ã—Å–∞–¥—ã. ”ò—Ä“õ–∞–π—Å—ã—Å—ã –∂–µ–∫–µ —Å“±—Ä–∞“õ—Ç–∞—Ä –∞–ª–∞–¥—ã, –±—ñ—Ä–∞“õ —Å“±—Ä–∞“õ—Ç–∞—Ä –±—ñ—Ä–¥–µ–π.\n"
        "‚è±Ô∏è –£–∞“õ—ã—Ç —à–µ–∫—Ç–µ—É–ª—ñ: 1 –º–∏–Ω—É—Ç.\n"
        "‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø: +10 “±–ø–∞–π\n‚ùå “ö–∞—Ç–µ –∂–∞—É–∞–ø: -5 “±–ø–∞–π\n"
        "üèÜ –ö—ñ–º –∫”©–ø “±–ø–∞–π –∂–∏–Ω–∞—Å–∞ ‚Äî —Å–æ–ª –∂–µ“£—ñ–º–ø–∞–∑!\n\n"
        "üá∑üá∫ –î–≤–∞ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º. –í–æ–ø—Ä–æ—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–æ –æ—Ç–≤–µ—Ç—ã –¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
        "‚è±Ô∏è –í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: 1 –º–∏–Ω—É—Ç–∞.\n"
        "‚úÖ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: +10 –æ—á–∫–æ–≤\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π: -5 –æ—á–∫–æ–≤\n"
        "üèÜ –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–±—Ä–∞–≤—à–∏–π –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤.\n"
    )
    keyboard = [[InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç / Start", callback_data="start_battle")],
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞ / –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global waiting_player, waiting_context
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    if waiting_player is None:
        waiting_player = user_id
        waiting_context = context
        await update.callback_query.edit_message_text(
            "üïπÔ∏è “ö–∞—Ä—Å—ã–ª–∞—Å —ñ–∑–¥–µ–ª—É–¥–µ...\n\n‚è≥ –ö“Ø—Ç—ñ“£—ñ–∑. / –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõë –°—Ç–æ–ø / –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="cancel_battle")],
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞ / –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )

    else:
        opponent_id = waiting_player
        opponent_ctx = waiting_context
        waiting_player = None
        waiting_context = None
        await pair_players(user_id, opponent_id, context, opponent_ctx)

async def pair_players(user1_id, user2_id, ctx1, ctx2):
    questions = random.sample(all_questions, min(50, len(all_questions)))

    active_battles[user1_id] = user2_id
    active_battles[user2_id] = user1_id

    user_states[user1_id] = {
        "score": 0, "correct": 0, "wrong": 0, "index": 0,
        "start_time": time.time(), "questions": questions, "last_msg": None
    }
    user_states[user2_id] = {
        "score": 0, "correct": 0, "wrong": 0, "index": 0,
        "start_time": time.time(), "questions": questions, "last_msg": None
    }

    asyncio.create_task(battle_timer(user1_id, ctx1))
    asyncio.create_task(battle_timer(user2_id, ctx2))

    await send_question_to_user(user1_id, ctx1)
    await send_question_to_user(user2_id, ctx2)

async def battle_timer(user_id, context):
    await asyncio.sleep(60)
    if user_id in active_battles:
        opponent_id = active_battles[user_id]
        # üîí –¢–µ–∫ –±—ñ—Ä —Ä–µ—Ç “ì–∞–Ω–∞ finish_battle —à–∞“õ—ã—Ä—É
        if user_id < opponent_id:
            await finish_battle(user_id, opponent_id, context)


async def send_question_to_user(user_id, context):
    state = user_states[user_id]
    index = state["index"]

    if index >= len(state["questions"]):
        return

    q = state["questions"][index]
    keyboard = [
        [InlineKeyboardButton(f"1Ô∏è‚É£ {q['options'][0]}", callback_data="battle_ans_0")],
        [InlineKeyboardButton(f"2Ô∏è‚É£ {q['options'][1]}", callback_data="battle_ans_1")],
        [InlineKeyboardButton(f"3Ô∏è‚É£ {q['options'][2]}", callback_data="battle_ans_2")],
        [InlineKeyboardButton(f"4Ô∏è‚É£ {q['options'][3]}", callback_data="battle_ans_3")]
    ]

    text = f"‚ùì <b>{q.get('question_kz', '')} / {q.get('question_ru', '')}</b>"

    if state.get("last_msg"):
        try:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=state["last_msg"],
                text=text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        except:
            pass

    msg = await context.bot.send_message(
        chat_id=user_id,
        text=text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    state["last_msg"] = msg.message_id

async def handle_battle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    if user_id not in user_states:
        return
    state = user_states[user_id]
    q = state["questions"][state["index"]]
    answer_index = int(update.callback_query.data[-1])

    if q["options"][answer_index] == q["correct"]:
        state["score"] += 10
        state["correct"] += 1
    else:
        state["score"] -= 5
        state["wrong"] += 1

    state["index"] += 1
    await update.callback_query.answer()

    # ‚úÖ –°–æ“£“ì—ã –∂–∞—É–∞–ø ID —Å–∞“õ—Ç–∞—É
    state["last_msg"] = update.callback_query.message.message_id

    await send_question_to_user(user_id, context)

async def finish_battle(user1_id, user2_id, context):
    if user1_id not in active_battles or user2_id not in active_battles:
        return

    for uid in [user1_id, user2_id]:
        msg_id = user_states.get(uid, {}).get("last_msg")
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=uid, message_id=msg_id)
            except:
                pass

    for uid in [user1_id, user2_id]:
        my_data = user_states.get(uid, {})
        op_id = user1_id if uid == user2_id else user2_id
        op_data = user_states.get(op_id, {})

        result = (
            f"üìä <b>–ù”ô—Ç–∏–∂–µ / –†–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"üë§ <b>–°—ñ–∑:</b> {my_data.get('score', 0)} “±–ø–∞–π\n"
            f"‚Ä¢ –î“±—Ä—ã—Å: {my_data.get('correct', 0)} / “ö–∞—Ç–µ: {my_data.get('wrong', 0)}\n"
            f"‚Ä¢ –°“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã: {my_data.get('index', 0)}\n\n"
            f"üë• <b>“ö–∞—Ä—Å—ã–ª–∞—Å:</b> {op_data.get('score', 0)} “±–ø–∞–π\n"
            f"‚Ä¢ –î“±—Ä—ã—Å: {op_data.get('correct', 0)} / “ö–∞—Ç–µ: {op_data.get('wrong', 0)}\n"
            f"‚Ä¢ –°“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã: {op_data.get('index', 0)}\n\n"
        )

        if my_data.get('score', 0) > op_data.get('score', 0):
            result += "üéâ <b>–°—ñ–∑ –∂–µ“£–¥—ñ“£—ñ–∑! / –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>"
        elif my_data.get('score', 0) < op_data.get('score', 0):
            result += "üò¨ <b>–°—ñ–∑ –∂–µ“£—ñ–ª–¥—ñ“£—ñ–∑ / –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</b>"
        else:
            result += "‚úåÔ∏è <b>–¢–µ“£ –æ–π—ã–Ω / –ù–∏—á—å—è</b>"

        keyboard = [
            [InlineKeyboardButton("üîÅ “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É / –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start_battle")],
            [InlineKeyboardButton("üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]

        await context.bot.send_message(
            chat_id=uid,
            text=result,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞“õ—Ç–∞—É
    users = load_users()
    for uid in [user1_id, user2_id]:
        data = user_states.get(uid, {})
        user = users.get(str(uid), {
            "name": "–ê–Ω–æ–Ω–∏–º",
            "score": 0,
            "games_played": 0,
            "last_mode": ""
        })

        user["score"] += data.get("score", 0)
        user["games_played"] += 1
        user["last_mode"] = "1x1"
        users[str(uid)] = user
    save_users(users)

    for uid in [user1_id, user2_id]:
        active_battles.pop(uid, None)
        user_states.pop(uid, None)



async def cancel_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global waiting_player, waiting_context
    user_id = update.callback_query.from_user.id

    if waiting_player == user_id:
        waiting_player = None
        waiting_context = None
        await update.callback_query.edit_message_text(
            "‚ùå –Ü–∑–¥–µ—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã / –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await update.callback_query.answer("‚ùå –°—ñ–∑ –∫“Ø—Ç—É–¥–µ –µ–º–µ—Å—Å—ñ–∑. / –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)

