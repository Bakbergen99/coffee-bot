from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
import json
import random
import asyncio
from utils import load_users, save_users
from handlers_menu import show_inline_main_menu

# –°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É
with open("questions.json", "r", encoding="utf-8") as f:
    QUESTIONS = json.load(f)

# –°–æ–ª–æ —Ä–µ–∂–∏–º –µ—Ä–µ–∂–µ—Å—ñ
async def solo_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üßç‚Äç‚ôÇÔ∏è *–°–æ–ª–æ —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ –µ—Ä–µ–∂–µ—Å—ñ*\n\n"
        "‚è± *60 —Å–µ–∫—É–Ω–¥ —ñ—à—ñ–Ω–¥–µ* –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω—à–µ –∫”©–ø —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑.\n"
        "‚úÖ ”ò—Ä –¥“±—Ä—ã—Å –∂–∞—É–∞–ø ‚Äî *+10 “±–ø–∞–π*\n"
        "‚ùå ”ò—Ä “õ–∞—Ç–µ –∂–∞—É–∞–ø ‚Äî *-5 “±–ø–∞–π*\n\n"
        "üßç‚Äç‚ôÇÔ∏è *–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–ª–æ —Ä–µ–∂–∏–º–∞*\n\n"
        "‚è± *–í —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥* –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "‚úÖ –ö–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî *+10 –±–∞–ª–ª–æ–≤*\n"
        "‚ùå –ö–∞–∂–¥—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî *-5 –±–∞–ª–ª–æ–≤*\n\n"
        "üëá –ñ–∞—É–∞–ø –Ω“±—Å“õ–∞—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:"
    )
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_solo")],
        [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞ / –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text(text, parse_mode="Markdown", reply_markup=reply_markup)

# –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
async def start_solo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data.update({
        "score": 0,
        "correct_answers": 0,
        "wrong_answers": 0,
        "total_questions": 0,
        "start_time": asyncio.get_event_loop().time(),
        "finished": False,
        "questions": random.sample(QUESTIONS, k=len(QUESTIONS)),
        "question_index": 0,
    })

    await send_question(update, context)
    asyncio.create_task(end_game_after_timeout(update, context))

# –°“±—Ä–∞“õ—Ç—ã –∂—ñ–±–µ—Ä—É
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("finished"):
        return

    index = context.user_data["question_index"]
    questions = context.user_data["questions"]

    if index >= len(questions):
        context.user_data["finished"] = True
        await show_solo_results(update, context)
        return

    question = questions[index]
    options = question["options"].copy()
    random.shuffle(options)
    correct = question["correct"]
    correct_index = options.index(correct)

    context.user_data["correct_index"] = correct_index
    context.user_data["question_index"] = index + 1
    context.user_data["total_questions"] += 1

    text = f"*{question.get('question_kz', '')}*\n_{question.get('question_ru', '')}_"
    # –ú”ô—Ç—ñ–Ω –±–æ—Å –±–æ–ª–º–∞—Å—ã–Ω
    if not text.strip():
        text = "‚ùå –°“±—Ä–∞“õ –º”ô—Ç—ñ–Ω—ñ –±–æ—Å. / –í–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π."
    buttons = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(options)]
    reply_markup = InlineKeyboardMarkup(buttons)

    message = update.callback_query.message if update.callback_query else update.message
    message = update.callback_query.message if update.callback_query else update.message

    msg = await message.edit_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    context.user_data["last_msg"] = msg.message_id



# –ñ–∞—É–∞–ø—Ç—ã ”©“£–¥–µ—É
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data in ["back", "back_to_menu"]:
        msg_id = context.user_data.get("last_msg")
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        context.user_data["last_msg"] = None

        await query.message.delete()
        await show_inline_main_menu(update, context)
        return

    if query.data == "start_solo":
        await start_solo(update, context)
        return

    if query.data == "restart_solo":
        msg_id = context.user_data.get("last_msg")
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
            context.user_data["last_msg"] = None

        await start_solo(update, context)
        return

    if context.user_data.get("finished"):
        return

    try:
        selected = int(query.data)
    except ValueError:
        return

    if selected == context.user_data.get("correct_index"):
        context.user_data["score"] += 10
        context.user_data["correct_answers"] += 1
    else:
        context.user_data["score"] -= 5
        context.user_data["wrong_answers"] += 1

    now = asyncio.get_event_loop().time()
    if now - context.user_data["start_time"] >= 60:
        context.user_data["finished"] = True
        await show_solo_results(update, context)
    else:
        await send_question(update, context)

# 60 —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω –∞—è“õ—Ç–∞—É
async def end_game_after_timeout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(60)
    if not context.user_data.get("finished"):
        context.user_data["finished"] = True
        await show_solo_results(update, context)



# –ù”ô—Ç–∏–∂–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
async def show_solo_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    score = context.user_data["score"]
    correct = context.user_data["correct_answers"]
    wrong = context.user_data["wrong_answers"]
    total = correct + wrong

    text = (
        f"üèÅ *–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã / –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n"
        f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø / –í–µ—Ä–Ω—ã—Ö: *{correct}*\n"
        f"‚ùå “ö–∞—Ç–µ –∂–∞—É–∞–ø / –û—à–∏–±–æ–∫: *{wrong}*\n"
        f"‚ùì –ë–∞—Ä–ª—ã“ì—ã / –í—Å–µ–≥–æ: *{total}* —Å“±—Ä–∞“õ\n"
        f"üß† “∞–ø–∞–π / –ë–∞–ª–ª—ã: *{score}*"
    )

    user_id = str(update.effective_user.id)
    user_name = update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    users = load_users()


    if user_id not in users:
        users[user_id] = {
            "name": user_name,
            "score": 0,
            "games_played": 0,
            "last_mode": ""
        }

    users[user_id]["score"] += score
    users[user_id]["games_played"] += 1
    users[user_id]["last_mode"] = "–°–æ–ª–æ"

    save_users(users)

    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÅ “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É / –†–µ—Å—Ç–∞—Ä—Ç", callback_data="restart_solo")],
        [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞ / –ù–∞–∑–∞–¥", callback_data="back")]
    ])

    await update.callback_query.message.reply_text(text, parse_mode="Markdown", reply_markup=buttons)
